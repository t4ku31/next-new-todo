generator client {
provider = "prisma-client-js"
}

datasource db {
provider          = "mysql"
url               = env("DATABASE_URL")
shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// -----------------------------
// User モデル: 認証・フレンド管理・タスク所有者
// -----------------------------
model User {
id             Int              @id @default(autoincrement())
username       String           @unique
email          String           @unique
passwordHash   String
createdAt      DateTime         @default(now())
updatedAt      DateTime         @updatedAt

// リレーション
todos           Todo[]
sharedTasks     SharedTask[]    @relation("OwnerSharedTasks")
sharedWith      SharedTask[]    @relation("SharedWithTasks")

sentRequests     FriendRequest[] @relation("sentRequests")
receivedRequests FriendRequest[] @relation("receivedRequests")
friends          Friend[]        @relation("UserFriends")
friendOf         Friend[]        @relation("UserFriendsReverse")

chatRoomsAsUser1 ChatRoom[]      @relation("ChatRoomsAsUser1")
chatRoomsAsUser2 ChatRoom[]      @relation("ChatRoomsAsUser2")
sentMessages     ChatMessage[]   @relation("ChatMessageSender")
}

// -----------------------------
// Todo モデル: タスクグループ（日付ごと）
// -----------------------------
model Todo {
id         Int         @id @default(autoincrement())
userId     Int
targetDate DateTime    // アプリ側でフォーマット利用
createdAt  DateTime    @default(now())
updatedAt  DateTime    @updatedAt

user       User        @relation(fields: [userId], references: [id])
items      TodoItem[]

@@unique([userId, targetDate])
}

// -----------------------------
// TodoItem モデル: 各タスク
// -----------------------------
model TodoItem {
id          Int         @id @default(autoincrement())
todoId      Int
title       String      // 名称・概要
description String?     // 任意詳細
dueTime     DateTime?   // オプション: 時間指定
createdAt   DateTime    @default(now())
updatedAt   DateTime    @updatedAt
isDone      Boolean     @default(false)

todo        Todo        @relation(fields: [todoId], references: [id])
sharedTasks SharedTask[]
}

// -----------------------------
// SharedTask モデル: 共有タスク
// -----------------------------
model SharedTask {
id           Int      @id @default(autoincrement())
todoItemId   Int
ownerId      Int
sharedWithId Int
permission   String   @default("read")
createdAt    DateTime @default(now())

todoItem   TodoItem  @relation(fields: [todoItemId], references: [id])
owner      User      @relation("OwnerSharedTasks", fields: [ownerId], references: [id])
sharedWith User      @relation("SharedWithTasks", fields: [sharedWithId], references: [id])
}

// -----------------------------
// FriendRequest 用ステータス
// -----------------------------
enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// -----------------------------
// FriendRequest モデル: 友達申請
// -----------------------------
model FriendRequest {
  id        String        @id @default(cuid())
  fromId    Int
  toId      Int
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  from User @relation("sentRequests",   fields: [fromId], references: [id])
  to   User @relation("receivedRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}


// -----------------------------
// Friend モデル: 承認後のフレンド関係
// -----------------------------
model Friend {
id        Int      @id @default(autoincrement())
userId    Int
friendId  Int
createdAt DateTime @default(now())

user      User     @relation("UserFriends", fields: [userId], references: [id])
friend    User     @relation("UserFriendsReverse", fields: [friendId], references: [id])

@@unique([userId, friendId])
}

// -----------------------------
// ChatRoom モデル: 1:1 チャットルーム
// -----------------------------
model ChatRoom {
id        String      @id @default(cuid())
user1Id   Int
user2Id   Int
createdAt DateTime    @default(now())

user1     User        @relation("ChatRoomsAsUser1", fields: [user1Id], references: [id])
user2     User        @relation("ChatRoomsAsUser2", fields: [user2Id], references: [id])
messages  ChatMessage[]

@@unique([user1Id, user2Id])
}

// -----------------------------
// ChatMessage モデル: メッセージ履歴
// -----------------------------
model ChatMessage {
id        String   @id @default(cuid())
roomId    String
senderId  Int
content   String
createdAt DateTime @default(now())

room      ChatRoom @relation(fields: [roomId], references: [id])
sender    User     @relation("ChatMessageSender", fields: [senderId], references: [id])
}
